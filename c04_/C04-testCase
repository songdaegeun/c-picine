/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jontonde <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/13 18:21:02 by jontonde          #+#    #+#             */
/*   Updated: 2023/02/14 15:44:46 by jontonde         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#define RED    "\033[1;31m"
#define GREEN  "\033[1;32m"
#define YELLOW "\033[1;33m"
#define BLUE   "\033[1;34m"
#define RESET  "\033[0m"
#define PASS(res) res == 1 ? printf( GREEN " (\xE2\x9C\x93)" RESET ) : printf( RED " (x)"  RESET );
#define RET(res, ret) res == 1 ? printf( GREEN "%d\n" RESET, ret) : printf( RED "%d\n" RESET, ret);
int main()
{
		char number[] = "    --+--+--  2147483647";
		int r = ft_atoi(number);

		char number2[] = "  f  -+-++--2147483648";
		int r2 = ft_atoi(number2);

		char number3[] = "    -+-++--21474 83648";
		int r3 = ft_atoi(number3);

		char number4[] = "     ++2147483647";
		int r4 = ft_atoi(number4);

		char number40[] = "    -2147483648";
		int r40 = ft_atoi(number40);

		char number5[] = " ---+--+1234ab567";
		int r5 = ft_atoi(number5);

		char number6[] = " 5  ---+--+1234ab567";
		int r6 = ft_atoi(number6);

		char number7[] = "   --+--+1234ab567";
		int r7 = ft_atoi(number7);

		char number8[] = "";
		int r8 = ft_atoi(number8);

		char number9[] = "0000000000000000";
		int r9 = ft_atoi(number9);

        printf(YELLOW "\nTEST1 number is: " BLUE "\"%s\"" RESET, number);
        PASS(r == 0)
        printf("\n" );
        printf("-------------------------------\n");
        printf("My atoi:    "); RET(r == 0, r)
        printf("Expected:   %d\n\n", 0);
        printf("-------------------------------\n\n");

        usleep(500000);

        printf(YELLOW "\nTEST2 number is: " BLUE "\"%s\"" RESET, number2);
        PASS(r2 == 0)
        printf("\n" );
        printf("-------------------------------\n");
        printf("My atoi:    "); RET(r2 == 0, r2)
        printf("Expected:   %d\n\n", 0);
        printf("-------------------------------\n\n");

        usleep(500000);

        printf(YELLOW "\nTEST3 number is: " BLUE "\"%s\"" RESET, number3);
        PASS(r3 == 21474)
        printf("\n" );
        printf("-------------------------------\n");
        printf("My atoi:    "); RET(r3 == 21474, r3)
        printf("Expected:   %d\n\n", 21474);
        printf("-------------------------------\n\n");

        usleep(500000);

        printf(YELLOW "\nTEST4 number is: " BLUE "\"%s\"" RESET, number4);
        PASS(r4 == 2147483647)
        printf("\n" );
        printf("-------------------------------\n");
        printf("My atoi:    "); RET(r4 == 2147483647, r4)
        printf("Expected:   %d\n\n", 2147483647);
        printf("-------------------------------\n\n");

        usleep(500000);

        printf(YELLOW "\nTEST40 number is: " BLUE "\"%s\"" RESET, number40);
        PASS(r40 == -2147483648)
        printf("\n" );
        printf("-------------------------------\n");
        printf("My atoi:    "); RET(r40 == -2147483648, r40)
        printf("Expected:   %ld\n\n", -2147483648);
        printf("-------------------------------\n\n");

        usleep(500000);

        printf(YELLOW "\nTEST5 number is: " BLUE "\"%s\"" RESET, number5);
        PASS(r5 == -1234)
        printf("\n" );
        printf("-------------------------------\n");
        printf("My atoi:    "); RET(r5 == -1234, r5)
        printf("Expected:   %d\n\n", -1234);
        printf("-------------------------------\n\n");

        usleep(500000);

        printf(YELLOW "\nTEST6 number is: " BLUE "\"%s\"" RESET, number6);
        PASS(r6 == 5)
        printf("\n" );
        printf("-------------------------------\n");
        printf("My atoi:    "); RET(r6 == 5, r6)
        printf("Expected:   %d\n\n", 5);
        printf("-------------------------------\n\n");

        usleep(500000);

        printf(YELLOW "\nTEST7 number is: " BLUE "\"%s\"" RESET, number7);
        PASS(r7 == 1234)
        printf("\n" );
        printf("-------------------------------\n");
        printf("My atoi:    "); RET(r7 == 1234, r7)
        printf("Expected:   %d\n\n", 1234);
        printf("-------------------------------\n\n");

        usleep(500000);

        printf(YELLOW "\nTEST8 number is: " BLUE "\"%s\"" RESET, number8);
        PASS(r8 == 0)
        printf("\n" );
        printf("-------------------------------\n");
        printf("My atoi:    "); RET(r8 == 0, r8)
        printf("Expected:   %d\n\n", 0);
        printf("-------------------------------\n\n");

        usleep(500000);

        printf(YELLOW "\nTEST9 number is: " BLUE "\"%s\"" RESET, number9);
        PASS(r9 == 0)
        printf("\n" );
        printf("-------------------------------\n");
        printf("My atoi:    "); RET(r9 == 0, r9)
        printf("Expected:   %d\n\n", 0);
        printf("-------------------------------\n\n");

} 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putnbr_base.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jontonde <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/14 15:05:58 by jontonde          #+#    #+#             */
/*   Updated: 2023/02/14 20:30:10 by jontonde         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <string.h>
#include <unistd.h>
#define RED    "\033[1;31m"
#define GREEN  "\033[1;32m"
#define YELLOW "\033[1;33m"
#define BLUE   "\033[1;34m"
#define RESET  "\033[0m"
#define PASS(res) res == 1 ? printf( GREEN " (\xE2\x9C\x93)" RESET ) : printf( RED " (x)"  RESET );
#define RET(res, ret) res == 1 ? printf( GREEN "%d\n" RESET, ret) : printf( RED "%d\n" RESET, ret);
int main()
{

        printf(YELLOW "\nTEST1: nbr is" BLUE " 0" RESET);
        printf("\n" );
        printf("-------------------------------\n");
        printf("Decimal:  "); fflush( stdout ); ft_putnbr_base(0, "0123456789");
        printf(BLUE "\nExpected: %d\n\n" RESET , 0);
        
        printf("Hex:      "); fflush( stdout ); ft_putnbr_base(0, "0123456789abcdef");
		printf(BLUE "\nExpected: %s\n\n" RESET , "0");

        printf("Binary:   "); fflush( stdout ); ft_putnbr_base(0, "01");
		printf(BLUE "\nExpected: %s\n\n" RESET , "0");

        printf("poneyvif: "); fflush( stdout ); ft_putnbr_base(0, "poneyvif");
		printf(BLUE "\nExpected: %s\n\n" RESET , "p");
        printf("-------------------------------\n\n");

        usleep(500000);

        printf(YELLOW "\nTEST2: nbr is" BLUE " MIN_NT" RESET);
        printf("\n" );
        printf("-------------------------------\n");
        printf("Decimal:  "); fflush( stdout ); ft_putnbr_base(-2147483648, "0123456789");
        printf(BLUE "\nExpected: %s\n\n" RESET , "-2147483648");
        
        printf("Hex:      "); fflush( stdout ); ft_putnbr_base(-2147483648, "0123456789abcdef");
		printf(BLUE "\nExpected: %s\n\n" RESET , "-80000000");

        printf("Binary:   "); fflush( stdout ); ft_putnbr_base(-2147483648, "01");
		printf(BLUE "\nExpected: %s\n\n" RESET , "-10000000000000000000000000000000");

        printf("poneyvif: "); fflush( stdout ); ft_putnbr_base(-2147483648, "poneyvif");
		printf(BLUE "\nExpected: %s\n\n" RESET , "-npppppppppp");
        printf("-------------------------------\n\n");

        usleep(500000);

        printf(YELLOW "\nTEST3: nbr is" BLUE " MAX_NT" RESET);
        printf("\n" );
        printf("-------------------------------\n");
        printf("Decimal:  "); fflush( stdout ); ft_putnbr_base(2147483647, "0123456789");
        printf(BLUE "\nExpected: %d\n\n" RESET , 2147483647);
        
        printf("Hex:      "); fflush( stdout ); ft_putnbr_base(2147483647, "0123456789abcdef");
		printf(BLUE "\nExpected: %s\n\n" RESET , "7fffffff");

        printf("Binary:   "); fflush( stdout ); ft_putnbr_base(2147483647, "01");
		printf(BLUE "\nExpected: %s\n\n" RESET , "1111111111111111111111111111111");

        printf("poneyvif: "); fflush( stdout ); ft_putnbr_base(2147483647, "poneyvif");
		printf(BLUE "\nExpected: %s\n\n" RESET , "offffffffff");
        printf("-------------------------------\n\n");

		printf(YELLOW "\nTEST4 base is only 1 charactere" RESET);
        printf("\n" );
        printf("-------------------------------\n");
        printf("output:  "); fflush( stdout ); ft_putnbr_base(10, "p");
        printf(BLUE "\nExpected: \n\n" RESET);
        printf("-------------------------------\n\n");

        usleep(500000);

		printf(YELLOW "\nTEST5: base contain a wrong '+' charactere" RESET);
        printf("\n" );
        printf("-------------------------------\n");
        printf("output:  "); fflush( stdout );	ft_putnbr_base(10, "pone+yvif");
        printf(BLUE "\nExpected: \n\n" RESET);
        printf("-------------------------------\n\n");

        usleep(500000);

		printf(YELLOW "\nTEST6: base has double charactere" RESET);
        printf("\n" );
        printf("-------------------------------\n");
        printf("output:  "); fflush( stdout ); ft_putnbr_base(10, "ponpeyvif");
        printf(BLUE "\nExpected: \n\n" RESET);
        printf("-------------------------------\n\n");
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi_base.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jontonde <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/14 20:32:37 by jontonde          #+#    #+#             */
/*   Updated: 2023/02/14 21:10:57 by jontonde         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <string.h>
#include <unistd.h>
#define RED    "\033[1;31m"
#define GREEN  "\033[1;32m"
#define YELLOW "\033[1;33m"
#define BLUE   "\033[1;34m"
#define RESET  "\033[0m"
#define PASS(res) res == 1 ? printf( GREEN " (\xE2\x9C\x93)" RESET ) : printf( RED " (x)"  RESET );
#define RET(res, ret) res == 1 ? printf( GREEN "%d\n" RESET, ret) : printf( RED "%d\n" RESET, ret);
int main()
{
        int rd  = ft_atoi_base("    +-+-+10", "0123456789");
		int erd = 10;
        int rh  = ft_atoi_base("    +-+-+10", "0123456789abcdef");
		int erh = 16;
        int rb  = ft_atoi_base("    +-+-+10", "01");
		int erb = 2;
        int rp  = ft_atoi_base("    +-+-+10", "poneyvif");
		int erp = 0;
		
		//min int
        int rd2 = ft_atoi_base("    -2147483648", "0123456789");
		int erd2 = -2147483648;
        int rh2 = ft_atoi_base("    -80000000", "0123456789abcdef");
        int rb2 = ft_atoi_base("    -10000000000000000000000000000000", "01");

		// max int
        int rd3 = ft_atoi_base("    +2147483647", "0123456789");
		int erd3 = 2147483647;
        int rh3 = ft_atoi_base("    +7fffffff", "0123456789abcdef");
        int rb3 = ft_atoi_base("    +1111111111111111111111111111111", "01");

		// 0
        int rd4 = ft_atoi_base("    0", "0123456789");
        int rh4 = ft_atoi_base("    0", "0123456789abcdef");
        int rb4 = ft_atoi_base("    0", "01");
        int rp4 = ft_atoi_base("    0", "poneyvif");
		int er4 = 0;

		// truncated num
        int rd5 = ft_atoi_base("    ---2147o483648", "0123465789");
		int erd5 = -2147;
        int rh5 = ft_atoi_base("    ---2147o483648", "0123465789abcdef");
		int erh5 = -8519;
        int rb5 = ft_atoi_base("    ---2147o483648", "01");
		int erb5 = 0;
        int rp5 = ft_atoi_base("    ---2147o483648", "poneyvif");
		int erp5 = 0;

		// invalid

        int r6 = ft_atoi_base("    -2147o483648", "1");
        int r7 = ft_atoi_base(" o   -2147483648", "0123456789abcdef");
        int r8 = ft_atoi_base("", "0123456789abcdef");
        int r9 = ft_atoi_base(" -aw10", "012345+6789abcdef");
        int r10 = ft_atoi_base("  1001100", "011");


        printf(YELLOW "\nTEST1 number is:" BLUE " \"    +-+-+10\"" RESET);
        PASS(rd == erd && rh == erh && rb == erb && rp == erp)
        printf("\n" );
        printf("-------------------------------\n");
        printf("Decimal:  "); RET(rd == erd, rd)
        printf("Expect:   %d\n\n", erd);
        
        printf("Hex:      "); RET(rh == erh, rh)
		printf("Expect:   %d\n\n", erh);

        printf("Binary:   "); RET(rb == erb, rb)
		printf("Expect:   %d\n\n", erb);

        printf("octal:    "); RET(rp == erp, rp)
		printf("Expect:   %d\n\n", erp);
        printf("-------------------------------\n\n");

        usleep(500000);

		printf(YELLOW "\nTEST2 number is:" BLUE " MIN_INT" RESET);
        PASS(rd2 == erd2 && rh2 == erd2 && rb2 == erd2)
        printf("\n" );
        printf("-------------------------------\n");
        printf("Decimal:  "); RET(rd2 == erd2, rd2)
        printf("Expect:   %d\n\n", erd2);
        
        printf("Hex:      "); RET(rh2 == erd2, rh2)
		printf("Expect:   %d\n\n", erd2);

        printf("Binary:   "); RET(rb2 == erd2, rb2)
		printf("Expect:   %d\n\n", erd2);
        printf("-------------------------------\n\n");

        usleep(500000);

		printf(YELLOW "\nTEST3 number is:" BLUE " MAX_INT" RESET);
        PASS(rd3 == erd3 && rh3 == erd3 && rb3 == erd3)
        printf("\n" );
        printf("-------------------------------\n");
        printf("Decimal:  "); RET(rd3 == erd3, rd3)
        printf("Expect:   %d\n\n", erd3);
        
        printf("Hex:      "); RET(rh3 == erd3, rh3)
		printf("Expect:   %d\n\n", erd3);

        printf("Binary:   "); RET(rb3 == erd3, rb3)
		printf("Expect:   %d\n\n", erd3);
        printf("-------------------------------\n\n");

        usleep(500000);

		printf(YELLOW "\nTEST4 number is: " BLUE "\"    0\"" RESET);
        PASS(rd4 == er4 && rh4 == er4 && rb4 == er4 )
        printf("\n" );
        printf("-------------------------------\n");
        printf("Decimal:  "); RET(rd4 == er4, rd4)
        printf("Expect:   %d\n\n", er4);
        
        printf("Hex:      "); RET(rh4 == er4, rh4)
		printf("Expect:   %d\n\n", er4);

        printf("Binary:   "); RET(rb4 == er4, rb4)
		printf("Expect:   %d\n\n", er4);

        printf("octal:    "); RET(rp4 == er4, rp4)
		printf("Expect:   %d\n\n", 0);
        printf("-------------------------------\n\n");

        usleep(500000);

		printf(YELLOW "\nTEST5 number is: " BLUE "\"    ---2147o483648\"" RESET);
        PASS(rd5 == erd5 && rh5 == erh5 && rb5 == erb5 && rp5 == erp5)
        printf("\n" );
        printf("-------------------------------\n");
        printf("Decimal:  "); RET(rd5 == erd5, rd5)
        printf("Expect:   %d\n\n", erd5);
        
        printf("Hex:      "); RET(rh5 == erh5, rh5)
		printf("Expect:   %d\n\n", erh5);

        printf("Binary:   "); RET(rb5 == erb5, rb5)
		printf("Expect:   %d\n\n", erb5);

        printf("octal:    "); RET(rp5 == erp5, rp5)
		printf("Expect:   %d\n\n", erp5);
        printf("-------------------------------\n\n");

        usleep(500000);

		printf(YELLOW "\nTEST6 base is only 1 charactere" RESET);
        PASS(r6 == 0)
        printf("\n" );
        printf("-------------------------------\n");
        printf("output:  "); RET(r6 == 0, r6)
        printf("Expect:   %d\n\n", 0);
        printf("-------------------------------\n\n");

        usleep(500000);

		printf(YELLOW "\nTEST7: input is \" o   -2147483648\"" RESET);
        PASS(r7 == 0)
        printf("\n" );
        printf("-------------------------------\n");
        printf("output:  "); RET(r7 == 0, r7)
        printf("Expect:  %d\n\n", 0);
        printf("-------------------------------\n\n");

        usleep(500000);

		printf(YELLOW "\nTEST8: input is \"\"" RESET);
        PASS(r8 == 0)
        printf("\n" );
        printf("-------------------------------\n");
        printf("output:  "); RET(r8 == 0, r8)
        printf("Expect:  %d\n\n", 0);
        printf("-------------------------------\n\n");

        usleep(500000);

		printf(YELLOW "\nTEST9: base contain a wrong '+' charactere" RESET);
        PASS(r9 == 0)
        printf("\n" );
        printf("-------------------------------\n");
        printf("output:  "); RET(r9 == 0, r9)
        printf("Expect:  %d\n\n", 0);
        printf("-------------------------------\n\n");

        usleep(500000);

		printf(YELLOW "\nTEST10: base has double charactere" RESET);
        PASS(r10 == 0)
        printf("\n" );
        printf("-------------------------------\n");
        printf("output:  "); RET(r10 == 0, r10)
        printf("Expect:  %d\n\n", 0);
        printf("-------------------------------\n\n");
}